// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: grpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScorifyClient is the client API for Scorify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScorifyClient interface {
	Check(ctx context.Context, opts ...grpc.CallOption) (Scorify_CheckClient, error)
}

type scorifyClient struct {
	cc grpc.ClientConnInterface
}

func NewScorifyClient(cc grpc.ClientConnInterface) ScorifyClient {
	return &scorifyClient{cc}
}

func (c *scorifyClient) Check(ctx context.Context, opts ...grpc.CallOption) (Scorify_CheckClient, error) {
	stream, err := c.cc.NewStream(ctx, &Scorify_ServiceDesc.Streams[0], "/proto.Scorify/Check", opts...)
	if err != nil {
		return nil, err
	}
	x := &scorifyCheckClient{stream}
	return x, nil
}

type Scorify_CheckClient interface {
	Send(*CheckResponse) error
	Recv() (*CheckRequest, error)
	grpc.ClientStream
}

type scorifyCheckClient struct {
	grpc.ClientStream
}

func (x *scorifyCheckClient) Send(m *CheckResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *scorifyCheckClient) Recv() (*CheckRequest, error) {
	m := new(CheckRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScorifyServer is the server API for Scorify service.
// All implementations must embed UnimplementedScorifyServer
// for forward compatibility
type ScorifyServer interface {
	Check(Scorify_CheckServer) error
	mustEmbedUnimplementedScorifyServer()
}

// UnimplementedScorifyServer must be embedded to have forward compatible implementations.
type UnimplementedScorifyServer struct {
}

func (UnimplementedScorifyServer) Check(Scorify_CheckServer) error {
	return status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedScorifyServer) mustEmbedUnimplementedScorifyServer() {}

// UnsafeScorifyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScorifyServer will
// result in compilation errors.
type UnsafeScorifyServer interface {
	mustEmbedUnimplementedScorifyServer()
}

func RegisterScorifyServer(s grpc.ServiceRegistrar, srv ScorifyServer) {
	s.RegisterService(&Scorify_ServiceDesc, srv)
}

func _Scorify_Check_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScorifyServer).Check(&scorifyCheckServer{stream})
}

type Scorify_CheckServer interface {
	Send(*CheckRequest) error
	Recv() (*CheckResponse, error)
	grpc.ServerStream
}

type scorifyCheckServer struct {
	grpc.ServerStream
}

func (x *scorifyCheckServer) Send(m *CheckRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *scorifyCheckServer) Recv() (*CheckResponse, error) {
	m := new(CheckResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Scorify_ServiceDesc is the grpc.ServiceDesc for Scorify service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scorify_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Scorify",
	HandlerType: (*ScorifyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Check",
			Handler:       _Scorify_Check_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc.proto",
}
