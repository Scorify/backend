// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type LoginOutput struct {
	Name     string `json:"name"`
	Token    string `json:"token"`
	Expires  int    `json:"expires"`
	Path     string `json:"path"`
	Domain   string `json:"domain"`
	Secure   bool   `json:"secure"`
	HTTPOnly bool   `json:"httpOnly"`
}

type Notification struct {
	Message string           `json:"message"`
	Type    NotificationType `json:"type"`
}

type Source struct {
	Name   string `json:"name"`
	Schema string `json:"schema"`
}

type Subscription struct {
}

type NotificationType string

const (
	NotificationTypeDefault NotificationType = "default"
	NotificationTypeError   NotificationType = "error"
	NotificationTypeInfo    NotificationType = "info"
	NotificationTypeSuccess NotificationType = "success"
	NotificationTypeWarning NotificationType = "warning"
)

var AllNotificationType = []NotificationType{
	NotificationTypeDefault,
	NotificationTypeError,
	NotificationTypeInfo,
	NotificationTypeSuccess,
	NotificationTypeWarning,
}

func (e NotificationType) IsValid() bool {
	switch e {
	case NotificationTypeDefault, NotificationTypeError, NotificationTypeInfo, NotificationTypeSuccess, NotificationTypeWarning:
		return true
	}
	return false
}

func (e NotificationType) String() string {
	return string(e)
}

func (e *NotificationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationType", str)
	}
	return nil
}

func (e NotificationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StatusEnum string

const (
	StatusEnumUp      StatusEnum = "up"
	StatusEnumDown    StatusEnum = "down"
	StatusEnumUnknown StatusEnum = "unknown"
)

var AllStatusEnum = []StatusEnum{
	StatusEnumUp,
	StatusEnumDown,
	StatusEnumUnknown,
}

func (e StatusEnum) IsValid() bool {
	switch e {
	case StatusEnumUp, StatusEnumDown, StatusEnumUnknown:
		return true
	}
	return false
}

func (e StatusEnum) String() string {
	return string(e)
}

func (e *StatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StatusEnum", str)
	}
	return nil
}

func (e StatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
