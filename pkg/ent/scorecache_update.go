// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/scorify/backend/pkg/ent/predicate"
	"github.com/scorify/backend/pkg/ent/round"
	"github.com/scorify/backend/pkg/ent/scorecache"
	"github.com/scorify/backend/pkg/ent/user"
)

// ScoreCacheUpdate is the builder for updating ScoreCache entities.
type ScoreCacheUpdate struct {
	config
	hooks    []Hook
	mutation *ScoreCacheMutation
}

// Where appends a list predicates to the ScoreCacheUpdate builder.
func (scu *ScoreCacheUpdate) Where(ps ...predicate.ScoreCache) *ScoreCacheUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetUpdateTime sets the "update_time" field.
func (scu *ScoreCacheUpdate) SetUpdateTime(t time.Time) *ScoreCacheUpdate {
	scu.mutation.SetUpdateTime(t)
	return scu
}

// SetPoints sets the "points" field.
func (scu *ScoreCacheUpdate) SetPoints(i int) *ScoreCacheUpdate {
	scu.mutation.ResetPoints()
	scu.mutation.SetPoints(i)
	return scu
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (scu *ScoreCacheUpdate) SetNillablePoints(i *int) *ScoreCacheUpdate {
	if i != nil {
		scu.SetPoints(*i)
	}
	return scu
}

// AddPoints adds i to the "points" field.
func (scu *ScoreCacheUpdate) AddPoints(i int) *ScoreCacheUpdate {
	scu.mutation.AddPoints(i)
	return scu
}

// SetRoundID sets the "round" edge to the Round entity by ID.
func (scu *ScoreCacheUpdate) SetRoundID(id uuid.UUID) *ScoreCacheUpdate {
	scu.mutation.SetRoundID(id)
	return scu
}

// SetRound sets the "round" edge to the Round entity.
func (scu *ScoreCacheUpdate) SetRound(r *Round) *ScoreCacheUpdate {
	return scu.SetRoundID(r.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (scu *ScoreCacheUpdate) SetUserID(id uuid.UUID) *ScoreCacheUpdate {
	scu.mutation.SetUserID(id)
	return scu
}

// SetUser sets the "user" edge to the User entity.
func (scu *ScoreCacheUpdate) SetUser(u *User) *ScoreCacheUpdate {
	return scu.SetUserID(u.ID)
}

// Mutation returns the ScoreCacheMutation object of the builder.
func (scu *ScoreCacheUpdate) Mutation() *ScoreCacheMutation {
	return scu.mutation
}

// ClearRound clears the "round" edge to the Round entity.
func (scu *ScoreCacheUpdate) ClearRound() *ScoreCacheUpdate {
	scu.mutation.ClearRound()
	return scu
}

// ClearUser clears the "user" edge to the User entity.
func (scu *ScoreCacheUpdate) ClearUser() *ScoreCacheUpdate {
	scu.mutation.ClearUser()
	return scu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *ScoreCacheUpdate) Save(ctx context.Context) (int, error) {
	scu.defaults()
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *ScoreCacheUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *ScoreCacheUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *ScoreCacheUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *ScoreCacheUpdate) defaults() {
	if _, ok := scu.mutation.UpdateTime(); !ok {
		v := scorecache.UpdateDefaultUpdateTime()
		scu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scu *ScoreCacheUpdate) check() error {
	if v, ok := scu.mutation.Points(); ok {
		if err := scorecache.PointsValidator(v); err != nil {
			return &ValidationError{Name: "points", err: fmt.Errorf(`ent: validator failed for field "ScoreCache.points": %w`, err)}
		}
	}
	if _, ok := scu.mutation.RoundID(); scu.mutation.RoundCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ScoreCache.round"`)
	}
	if _, ok := scu.mutation.UserID(); scu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ScoreCache.user"`)
	}
	return nil
}

func (scu *ScoreCacheUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(scorecache.Table, scorecache.Columns, sqlgraph.NewFieldSpec(scorecache.FieldID, field.TypeInt))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.UpdateTime(); ok {
		_spec.SetField(scorecache.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := scu.mutation.Points(); ok {
		_spec.SetField(scorecache.FieldPoints, field.TypeInt, value)
	}
	if value, ok := scu.mutation.AddedPoints(); ok {
		_spec.AddField(scorecache.FieldPoints, field.TypeInt, value)
	}
	if scu.mutation.RoundCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scorecache.RoundTable,
			Columns: []string{scorecache.RoundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(round.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RoundIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scorecache.RoundTable,
			Columns: []string{scorecache.RoundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(round.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scorecache.UserTable,
			Columns: []string{scorecache.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scorecache.UserTable,
			Columns: []string{scorecache.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scorecache.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// ScoreCacheUpdateOne is the builder for updating a single ScoreCache entity.
type ScoreCacheUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScoreCacheMutation
}

// SetUpdateTime sets the "update_time" field.
func (scuo *ScoreCacheUpdateOne) SetUpdateTime(t time.Time) *ScoreCacheUpdateOne {
	scuo.mutation.SetUpdateTime(t)
	return scuo
}

// SetPoints sets the "points" field.
func (scuo *ScoreCacheUpdateOne) SetPoints(i int) *ScoreCacheUpdateOne {
	scuo.mutation.ResetPoints()
	scuo.mutation.SetPoints(i)
	return scuo
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (scuo *ScoreCacheUpdateOne) SetNillablePoints(i *int) *ScoreCacheUpdateOne {
	if i != nil {
		scuo.SetPoints(*i)
	}
	return scuo
}

// AddPoints adds i to the "points" field.
func (scuo *ScoreCacheUpdateOne) AddPoints(i int) *ScoreCacheUpdateOne {
	scuo.mutation.AddPoints(i)
	return scuo
}

// SetRoundID sets the "round" edge to the Round entity by ID.
func (scuo *ScoreCacheUpdateOne) SetRoundID(id uuid.UUID) *ScoreCacheUpdateOne {
	scuo.mutation.SetRoundID(id)
	return scuo
}

// SetRound sets the "round" edge to the Round entity.
func (scuo *ScoreCacheUpdateOne) SetRound(r *Round) *ScoreCacheUpdateOne {
	return scuo.SetRoundID(r.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (scuo *ScoreCacheUpdateOne) SetUserID(id uuid.UUID) *ScoreCacheUpdateOne {
	scuo.mutation.SetUserID(id)
	return scuo
}

// SetUser sets the "user" edge to the User entity.
func (scuo *ScoreCacheUpdateOne) SetUser(u *User) *ScoreCacheUpdateOne {
	return scuo.SetUserID(u.ID)
}

// Mutation returns the ScoreCacheMutation object of the builder.
func (scuo *ScoreCacheUpdateOne) Mutation() *ScoreCacheMutation {
	return scuo.mutation
}

// ClearRound clears the "round" edge to the Round entity.
func (scuo *ScoreCacheUpdateOne) ClearRound() *ScoreCacheUpdateOne {
	scuo.mutation.ClearRound()
	return scuo
}

// ClearUser clears the "user" edge to the User entity.
func (scuo *ScoreCacheUpdateOne) ClearUser() *ScoreCacheUpdateOne {
	scuo.mutation.ClearUser()
	return scuo
}

// Where appends a list predicates to the ScoreCacheUpdate builder.
func (scuo *ScoreCacheUpdateOne) Where(ps ...predicate.ScoreCache) *ScoreCacheUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *ScoreCacheUpdateOne) Select(field string, fields ...string) *ScoreCacheUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated ScoreCache entity.
func (scuo *ScoreCacheUpdateOne) Save(ctx context.Context) (*ScoreCache, error) {
	scuo.defaults()
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *ScoreCacheUpdateOne) SaveX(ctx context.Context) *ScoreCache {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *ScoreCacheUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *ScoreCacheUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *ScoreCacheUpdateOne) defaults() {
	if _, ok := scuo.mutation.UpdateTime(); !ok {
		v := scorecache.UpdateDefaultUpdateTime()
		scuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scuo *ScoreCacheUpdateOne) check() error {
	if v, ok := scuo.mutation.Points(); ok {
		if err := scorecache.PointsValidator(v); err != nil {
			return &ValidationError{Name: "points", err: fmt.Errorf(`ent: validator failed for field "ScoreCache.points": %w`, err)}
		}
	}
	if _, ok := scuo.mutation.RoundID(); scuo.mutation.RoundCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ScoreCache.round"`)
	}
	if _, ok := scuo.mutation.UserID(); scuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ScoreCache.user"`)
	}
	return nil
}

func (scuo *ScoreCacheUpdateOne) sqlSave(ctx context.Context) (_node *ScoreCache, err error) {
	if err := scuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scorecache.Table, scorecache.Columns, sqlgraph.NewFieldSpec(scorecache.FieldID, field.TypeInt))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScoreCache.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scorecache.FieldID)
		for _, f := range fields {
			if !scorecache.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scorecache.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.UpdateTime(); ok {
		_spec.SetField(scorecache.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := scuo.mutation.Points(); ok {
		_spec.SetField(scorecache.FieldPoints, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.AddedPoints(); ok {
		_spec.AddField(scorecache.FieldPoints, field.TypeInt, value)
	}
	if scuo.mutation.RoundCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scorecache.RoundTable,
			Columns: []string{scorecache.RoundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(round.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RoundIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scorecache.RoundTable,
			Columns: []string{scorecache.RoundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(round.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scorecache.UserTable,
			Columns: []string{scorecache.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scorecache.UserTable,
			Columns: []string{scorecache.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ScoreCache{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scorecache.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
