// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/scorify/backend/pkg/ent/check"
	"github.com/scorify/backend/pkg/ent/checkconfig"
	"github.com/scorify/backend/pkg/ent/user"
)

// CheckConfig is the model entity for the CheckConfig schema.
type CheckConfig struct {
	config `json:"-"`
	// ID of the ent.
	// The uuid of a check configuration
	ID uuid.UUID `json:"id"`
	// The configuration of a check
	Config map[string]interface{} `json:"config"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CheckConfigQuery when eager-loading is set.
	Edges              CheckConfigEdges `json:"edges"`
	check_config_check *uuid.UUID
	check_config_user  *uuid.UUID
	selectValues       sql.SelectValues
}

// CheckConfigEdges holds the relations/edges for other nodes in the graph.
type CheckConfigEdges struct {
	// The check this configuration belongs to
	Check *Check `json:"check"`
	// The user this configuration belongs to
	User *User `json:"user"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CheckOrErr returns the Check value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CheckConfigEdges) CheckOrErr() (*Check, error) {
	if e.loadedTypes[0] {
		if e.Check == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: check.Label}
		}
		return e.Check, nil
	}
	return nil, &NotLoadedError{edge: "check"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CheckConfigEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CheckConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case checkconfig.FieldConfig:
			values[i] = new([]byte)
		case checkconfig.FieldID:
			values[i] = new(uuid.UUID)
		case checkconfig.ForeignKeys[0]: // check_config_check
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case checkconfig.ForeignKeys[1]: // check_config_user
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CheckConfig fields.
func (cc *CheckConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case checkconfig.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cc.ID = *value
			}
		case checkconfig.FieldConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cc.Config); err != nil {
					return fmt.Errorf("unmarshal field config: %w", err)
				}
			}
		case checkconfig.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field check_config_check", values[i])
			} else if value.Valid {
				cc.check_config_check = new(uuid.UUID)
				*cc.check_config_check = *value.S.(*uuid.UUID)
			}
		case checkconfig.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field check_config_user", values[i])
			} else if value.Valid {
				cc.check_config_user = new(uuid.UUID)
				*cc.check_config_user = *value.S.(*uuid.UUID)
			}
		default:
			cc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CheckConfig.
// This includes values selected through modifiers, order, etc.
func (cc *CheckConfig) Value(name string) (ent.Value, error) {
	return cc.selectValues.Get(name)
}

// QueryCheck queries the "check" edge of the CheckConfig entity.
func (cc *CheckConfig) QueryCheck() *CheckQuery {
	return NewCheckConfigClient(cc.config).QueryCheck(cc)
}

// QueryUser queries the "user" edge of the CheckConfig entity.
func (cc *CheckConfig) QueryUser() *UserQuery {
	return NewCheckConfigClient(cc.config).QueryUser(cc)
}

// Update returns a builder for updating this CheckConfig.
// Note that you need to call CheckConfig.Unwrap() before calling this method if this CheckConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (cc *CheckConfig) Update() *CheckConfigUpdateOne {
	return NewCheckConfigClient(cc.config).UpdateOne(cc)
}

// Unwrap unwraps the CheckConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cc *CheckConfig) Unwrap() *CheckConfig {
	_tx, ok := cc.config.driver.(*txDriver)
	if !ok {
		panic("ent: CheckConfig is not a transactional entity")
	}
	cc.config.driver = _tx.drv
	return cc
}

// String implements the fmt.Stringer.
func (cc *CheckConfig) String() string {
	var builder strings.Builder
	builder.WriteString("CheckConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cc.ID))
	builder.WriteString("config=")
	builder.WriteString(fmt.Sprintf("%v", cc.Config))
	builder.WriteByte(')')
	return builder.String()
}

// CheckConfigs is a parsable slice of CheckConfig.
type CheckConfigs []*CheckConfig
